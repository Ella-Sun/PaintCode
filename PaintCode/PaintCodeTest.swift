//
//  PaintCodeTest.swift
//  PaintCodeDemo
//
//  Created by sh on 16/8/17.
//  Copyright (c) 2016 YZ. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class PaintCodeTest : NSObject {

    //// Cache

    private struct Cache {
        static let baseColor: UIColor = UIColor(red: 0.067, green: 0.553, blue: 0.855, alpha: 1.000)
        static var imageOfStopwatch: UIImage?
        static var stopwatchTargets: [AnyObject]?
    }

    //// Colors

    public class var baseColor: UIColor { return Cache.baseColor }

    //// Drawing Methods

    public class func drawStopwatch() {

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 15, y: 30, width: 220, height: 220))
        PaintCodeTest.baseColor.setFill()
        ovalPath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 114, y: 2, width: 22, height: 34))
        PaintCodeTest.baseColor.setFill()
        rectanglePath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 214.14, y: 26))
        bezierPath.addLineToPoint(CGPoint(x: 235.36, y: 47.22))
        bezierPath.addLineToPoint(CGPoint(x: 221.21, y: 61.36))
        bezierPath.addCurveToPoint(CGPoint(x: 217.86, y: 58), controlPoint1: CGPoint(x: 221.21, y: 61.36), controlPoint2: CGPoint(x: 219.87, y: 60.02))
        bezierPath.addLineToPoint(CGPoint(x: 203.14, y: 58))
        bezierPath.addCurveToPoint(CGPoint(x: 203.14, y: 43.29), controlPoint1: CGPoint(x: 203.14, y: 58), controlPoint2: CGPoint(x: 203.14, y: 49.47))
        bezierPath.addCurveToPoint(CGPoint(x: 200, y: 40.14), controlPoint1: CGPoint(x: 201.25, y: 41.39), controlPoint2: CGPoint(x: 200, y: 40.14))
        bezierPath.addCurveToPoint(CGPoint(x: 203.14, y: 37), controlPoint1: CGPoint(x: 200, y: 40.14), controlPoint2: CGPoint(x: 201.31, y: 38.83))
        bezierPath.addCurveToPoint(CGPoint(x: 214.14, y: 26), controlPoint1: CGPoint(x: 207.31, y: 32.83), controlPoint2: CGPoint(x: 214.14, y: 26))
        bezierPath.closePath()
        PaintCodeTest.baseColor.setFill()
        bezierPath.fill()
    }

    public class func drawStopwatch_Hand() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 0, y: 328, width: 15, height: 15))
        UIColor.grayColor().setFill()
        ovalPath.fill()


        //// Bezier 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 125, 110)

        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPoint(x: 4, y: -87))
        bezier2Path.addCurveToPoint(CGPoint(x: 4, y: -15.46), controlPoint1: CGPoint(x: 4, y: -87), controlPoint2: CGPoint(x: 4, y: -48.03))
        bezier2Path.addCurveToPoint(CGPoint(x: 15, y: -1), controlPoint1: CGPoint(x: 10.34, y: -13.71), controlPoint2: CGPoint(x: 15, y: -7.9))
        bezier2Path.addCurveToPoint(CGPoint(x: 4, y: 13.46), controlPoint1: CGPoint(x: 15, y: 5.9), controlPoint2: CGPoint(x: 10.34, y: 11.71))
        bezier2Path.addCurveToPoint(CGPoint(x: 4, y: 28), controlPoint1: CGPoint(x: 4, y: 22.31), controlPoint2: CGPoint(x: 4, y: 28))
        bezier2Path.addLineToPoint(CGPoint(x: -4, y: 28))
        bezier2Path.addCurveToPoint(CGPoint(x: -4, y: 13.46), controlPoint1: CGPoint(x: -4, y: 28), controlPoint2: CGPoint(x: -4, y: 22.31))
        bezier2Path.addCurveToPoint(CGPoint(x: -15, y: -1), controlPoint1: CGPoint(x: -10.34, y: 11.71), controlPoint2: CGPoint(x: -15, y: 5.9))
        bezier2Path.addCurveToPoint(CGPoint(x: -4, y: -15.46), controlPoint1: CGPoint(x: -15, y: -7.9), controlPoint2: CGPoint(x: -10.34, y: -13.71))
        bezier2Path.addCurveToPoint(CGPoint(x: -4, y: -87), controlPoint1: CGPoint(x: -4, y: -48.03), controlPoint2: CGPoint(x: -4, y: -87))
        bezier2Path.addLineToPoint(CGPoint(x: 4, y: -87))
        bezier2Path.addLineToPoint(CGPoint(x: 4, y: -87))
        bezier2Path.closePath()
        UIColor.whiteColor().setFill()
        bezier2Path.fill()

        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class var imageOfStopwatch: UIImage {
        if Cache.imageOfStopwatch != nil {
            return Cache.imageOfStopwatch!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 250, height: 250), false, 0)
            PaintCodeTest.drawStopwatch()

        Cache.imageOfStopwatch = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfStopwatch!
    }

    //// Customization Infrastructure

    @IBOutlet var stopwatchTargets: [AnyObject]! {
        get { return Cache.stopwatchTargets }
        set {
            Cache.stopwatchTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: PaintCodeTest.imageOfStopwatch)
            }
        }
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
