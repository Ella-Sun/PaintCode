//
//  PaintCodeTutorial.swift
//  PaintCodeTutorial
//
//  Created by Vicki Wenderlich on 4/30/15.
//  Copyright (c) 2015 Razeware LLC. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class PaintCodeTutorial : NSObject {

    //// Cache

    private struct Cache {
        static var baseColor: UIColor = UIColor(red: 0.067, green: 0.553, blue: 0.855, alpha: 1.000)
        static var imageOfStopwatch: UIImage?
        static var stopwatchTargets: [AnyObject]?
    }

    //// Colors

    public class var baseColor: UIColor { return Cache.baseColor }

    //// Drawing Methods

    public class func drawStopwatch() {

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(15, 30, 220, 220))
        PaintCodeTutorial.baseColor.setFill()
        ovalPath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(114, 2, 22, 34))
        PaintCodeTutorial.baseColor.setFill()
        rectanglePath.fill()


        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(214.14, 30))
        bezierPath.addLineToPoint(CGPointMake(235.36, 51.21))
        bezierPath.addLineToPoint(CGPointMake(221.21, 65.35))
        bezierPath.addCurveToPoint(CGPointMake(216.86, 61), controlPoint1: CGPointMake(221.21, 65.35), controlPoint2: CGPointMake(219.41, 63.55))
        bezierPath.addLineToPoint(CGPointMake(204.14, 61))
        bezierPath.addCurveToPoint(CGPointMake(204.14, 48.28), controlPoint1: CGPointMake(204.14, 61), controlPoint2: CGPointMake(204.14, 54))
        bezierPath.addCurveToPoint(CGPointMake(200, 44.14), controlPoint1: CGPointMake(201.7, 45.84), controlPoint2: CGPointMake(200, 44.14))
        bezierPath.addLineToPoint(CGPointMake(214.14, 30))
        bezierPath.closePath()
        PaintCodeTutorial.baseColor.setFill()
        bezierPath.fill()
    }

    public class func drawStopwatch_Hand() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Bezier 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 125, 110)

        var bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(4, -90))
        bezier2Path.addCurveToPoint(CGPointMake(4, -14.46), controlPoint1: CGPointMake(4, -90), controlPoint2: CGPointMake(4, -47.74))
        bezier2Path.addCurveToPoint(CGPointMake(15, 0), controlPoint1: CGPointMake(10.34, -12.71), controlPoint2: CGPointMake(15, -6.9))
        bezier2Path.addCurveToPoint(CGPointMake(4, 14.46), controlPoint1: CGPointMake(15, 6.9), controlPoint2: CGPointMake(10.34, 12.71))
        bezier2Path.addCurveToPoint(CGPointMake(4, 25), controlPoint1: CGPointMake(4, 20.99), controlPoint2: CGPointMake(4, 25))
        bezier2Path.addLineToPoint(CGPointMake(-4, 25))
        bezier2Path.addCurveToPoint(CGPointMake(-4, 14.46), controlPoint1: CGPointMake(-4, 25), controlPoint2: CGPointMake(-4, 20.99))
        bezier2Path.addCurveToPoint(CGPointMake(-15, 0), controlPoint1: CGPointMake(-10.34, 12.71), controlPoint2: CGPointMake(-15, 6.9))
        bezier2Path.addCurveToPoint(CGPointMake(-4, -14.46), controlPoint1: CGPointMake(-15, -6.9), controlPoint2: CGPointMake(-10.34, -12.71))
        bezier2Path.addCurveToPoint(CGPointMake(-4, -90), controlPoint1: CGPointMake(-4, -47.74), controlPoint2: CGPointMake(-4, -90))
        bezier2Path.addLineToPoint(CGPointMake(4, -90))
        bezier2Path.addLineToPoint(CGPointMake(4, -90))
        bezier2Path.closePath()
        UIColor.whiteColor().setFill()
        bezier2Path.fill()

        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class var imageOfStopwatch: UIImage {
        if Cache.imageOfStopwatch != nil {
            return Cache.imageOfStopwatch!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(250, 250), false, 0)
            PaintCodeTutorial.drawStopwatch()

        Cache.imageOfStopwatch = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfStopwatch!
    }

    //// Customization Infrastructure

    @IBOutlet var stopwatchTargets: [AnyObject]! {
        get { return Cache.stopwatchTargets }
        set {
            Cache.stopwatchTargets = newValue
            for target: AnyObject in newValue {
                target.setImage(PaintCodeTutorial.imageOfStopwatch)
            }
        }
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
